name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: {}
  schedule:
    - cron: '0 3 * * *'   # daily smoke run

env:
  OPENAI_MODEL: gpt-4.1
  MAX_TOKENS_PER_RUN: '2000000'   # 2 M-token budget
  MAX_ATTEMPTS: '5'
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  GITHUB_TOKEN:   ${{ secrets.BOT_PAT }}

jobs:
  static:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [ruff, black, mypy]
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GITHUB_TOKEN:   ${{ secrets.BOT_PAT }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py-

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Cache lint data
        uses: actions/cache@v3
        with:
          path: |
            .pytest_cache
            .ruff_cache
          key: ${{ runner.os }}-${{ matrix.task }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.task }}-

      - name: Install dev deps
        run: pip install -e '.[dev]'

      - name: Run ${{ matrix.task }}
        run: |
          case "${{ matrix.task }}" in
            ruff) ruff check . ;;
            black) black --check . ;;
            mypy) mypy src/ ;;
          esac

  tests-evolve:
    needs: static
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GITHUB_TOKEN:   ${{ secrets.BOT_PAT }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py-

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Cache test data
        uses: actions/cache@v3
        with:
          path: |
            .pytest_cache
            .ruff_cache
          key: ${{ runner.os }}-tests-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-tests-

      - name: Install dev deps

        run: pip install -e '.[dev]'

      # run tests once, capture failure but don't abort
      - name: PyTest + Coverage
        id: tests
        continue-on-error: true
        run: |
          pytest -ra -vv --cov=statement_refinery \
                 --cov-report=term-missing --cov-report=xml \
                 --cov-fail-under=90

      # auto-patch loop if tests failed or FORCE_EVOLVE=1
      - name: Evolve patch loop
        id: evolve
        if: steps.tests.outcome == 'failure' || env.FORCE_EVOLVE == '1'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN:   ${{ secrets.BOT_PAT }}

        run: python .github/tools/evolve.py

      - name: Report evolve failure
        if: steps.evolve.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN_CLASSIC }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "evolve.py exited without opening a PR." >> $GITHUB_STEP_SUMMARY
          if [ -n "$PR_NUMBER" ]; then
            gh pr comment "$PR_NUMBER" -b "evolve.py exited without opening a PR."
          fi

      # confirm everything green after patch
      - name: Re-run tests
        if: always()
        run: |
          pytest -ra -vv --cov=statement_refinery \
                 --cov-report=term-missing --cov-report=xml \
                 --cov-fail-under=90

      - name: Upload coverage
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml


      - name: Check parser accuracy
        if: always()
        run: python scripts/check_accuracy.py
